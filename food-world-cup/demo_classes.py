"""This program will determine the most popular ethnic food based on demographics."""

import csv
import numpy as np
import string
import matplotlib
import matplotlib.pyplot as plt
import operator
import urllib   # urlencode function
import urllib2  # urlopen function (better than urllib version)
import json
from pprint import pprint
import pylab as plt2
from pylab import *
from matplotlib.widgets import Slider, Button, RadioButtons
import matplotlib.ticker as ticker



class Data(object):
	def __init__(self, filename):
		self.filename = filename
		self.age_range = '30-44'
	
	def get_numpy_array(self):                                                                                                                                             
		"""returns a numpy array built from the csv file. To stop numpy from crapping itself, uneven rows and columns are padded with empty strings so that all rows and            columns have the same number of elements"""                                                                                                                                 
		data = []      
		csv_file = self.filename                                                                                                                                                         
		f = open(csv_file, "rU")                                                                                                                                                     
		for row in csv.reader(f):                                                                                                                                              
			data.append(row)                                                                                                                                                    
		length = len(sorted(data,key=len, reverse=True)[0])
		#print np.array([x+[]*(length-len(x)) for x in data])  
		return np.array([x+[]*(length-len(x)) for x in data])  

	def fix_data(self):
		a = self.get_numpy_array()
		remove = ["N/A"]
		for element in a:
			for index in range(len(element)):
				if element[index] in remove:
					element[index] = 0
		return a

	def get_sum_by_age(self):
		data = self.fix_data()
		final = []
		fn = []
		for n in range(3,43):
			column_country_sum = []
			column_country = data[1:,n]
			for index in range(1,len(column_country)):
				if data[index, 44] == self.age_range:
					try:
						column_country_sum.append(int(data[index,n]))
					except:
						pass
			final.append(sum(column_country_sum))
		return final


	def get_country_rank_age(self):
		countries = ['Algeria','Argentina','Australia','Belgium','Bosnia and Herzegovia','Brazil','Cameroon','Chile','Colombia','Costa Rica','Croatia','Ecuador','England','France','Germany','Ghana','Greece','Honduras','Iran','Italy','Ivory Coast','Japan','Mexico','Netherlands','Nigeria','Portugal','Russia','South Korea','Spain','Switzerland','United States','Uruguay','China','India','Thailand','Turkey','Cuba','Ethiopia','Vietnam','Ireland']
		country_sum = self.get_sum_by_age()
		country_rank = dict(zip(countries,country_sum))
		return country_rank

class Plot(object):
	def __init__(self, filename):
		self.data = Data(filename)
		self.fig = plt.figure('Title', facecolor = '#0bb7c6')
		self.ax = self.fig.add_subplot(111)

	def make_barplot(self):
		"""Using a dictionary, plots a book's relative happiness in reference to the year it was published.
		Input is a list of txt files generated by the get_file function.
		file_list = list of string that correspond to .txt files"""
		self.ax.clear()
		plt.sca(self.ax)
		D = data.get_country_rank_age()
		for country in D:
			plt.bar(range(len(D)), D.values(), color = '#055d66')
		plt.xticks(range(len(D)),D.keys(),rotation = 'vertical')
		plt.ylabel('Sum of Rankings', color = '#2b3233', fontsize=13)
		plt.title('Popularity of Ethnic Foods', color='#2b3233',fontsize=15)
		self.make_button()
		plt.draw()
		plt.show()

	def make_button(self):
	    """
	    Creates a button labeled '18-29'
	    """
	    # Make '18-29' button
	    young_button_ax = plt.axes([0.8, 0.92, 0.17, 0.07])
	    button_young = Button(young_button_ax, '18-29')
	    button_young.on_clicked(self.click_18_29_button)
	    young_button_ax._button = button_young

	    # Make '30-44' button
	    middle_button_ax = plt.axes([0.8, 0.85, 0.17, 0.07])
	    button_middle = Button(middle_button_ax, '30-44')
	    button_middle.on_clicked(self.click_30_44_button)
	    middle_button_ax._button = button_middle

	    # Make '45-60' button
	    old_button_ax = plt.axes([0.8, 0.78, 0.17, 0.07])
	    button_old = Button(old_button_ax, '45-60')
	    button_old.on_clicked(self.click_45_60_button)
	    old_button_ax._button = button_old

	    # Make '> 60' button
	    oldest_button_ax = plt.axes([0.8, 0.71, 0.17, 0.07])
	    button_oldest = Button(oldest_button_ax, '> 60')
	    button_oldest.on_clicked(self.click_60_button)
	    oldest_button_ax._button = button_oldest

	def click_18_29_button(self, event):
		print 'click'
		data.age_range = '18-29'
		self.make_barplot()

	def click_30_44_button(self, event):
		data.age_range = '30-44'
		self.make_barplot()

	def click_45_60_button(self, event):
		data.age_range = '45-60'
		self.make_barplot()

	def click_60_button(self, event):
		data.age_range = '> 60'
		self.make_barplot()

data = Data('food-world-cup-data.csv')
plot = Plot(data)
plot.make_barplot()






